#!/bin/bash
# Usage: scan_perpage <imagefile>
#   where imagefile is the data just scanned
# (specify this script to scanadf via -S)

usage()
{
  echo "Usage: $0 <imagefile>"
  echo "Set the following environment variables:"
  echo "  RESOLUTION"
  echo "  SKIP_EMPTY_PAGES"
  echo "  VERBOSE (optional)"
  echo "  LOCKFILE (required if VERBOSE=1)"
}

log()
{
  if [[ $VERBOSE == 1 ]]; then
    echo "scan_perpage_preprocess: $1"
  fi
}

logstdout()
{
  if [[ $VERBOSE == 1 ]]; then
    cat
  else
    cat > /dev/null
  fi
}

runconstrained()
{
  if [[ -x "$(command -v sem)" ]]; then
    # use up to 75% of the cores available
    arg=$(echo "$@" | sed -E 's/([\(\)])/\\\1/g')  # Escaping parenthesis, otherwise the following will fail
    sem --jobs 75% --id scan_perpage_preprocess --fg "$arg"
  else
    "$@"
  fi
}

if [[ $# < 1 ]]; then
  usage
  exit 1
fi

if [[ "$RESOLUTION" == "" || "$SKIP_EMPTY_PAGES" == "" ]]; then
  usage
  exit 1
fi

IMAGE_PATH=$1
IMAGE_DIR=$(dirname $1)
IMAGE_FILE=$(basename $1)

TIMEVERBOSE=
if [[ $VERBOSE == 1 ]]; then
  TIMEVERBOSE=time
fi

process_page() {
  log ""
  log "-------------------------------------------------------------------------------"
  log "Pre-processing scanned page ${IMAGE_PATH} with skip-empty-pages=$SKIP_EMPTY_PAGESâ€¦"
  log "-------------------------------------------------------------------------------"

  if [[ $SKIP_EMPTY_PAGES == 1 ]]; then
    # Applying full optimization algorithm at juste 1/5th of the resolution to check if page is blank.
    PERCENTAGE_WHITE=$(convert "$IMAGE_PATH" -resize 20% -shave 4%x4% \( +clone -lat ${RESOLUTION/5}x${RESOLUTION/5}-10% -threshold 96% \) -compose lighten -composite -fuzz 0% -negate -threshold 0 -negate -format "%[fx:100*mean]" info:) || PERCENTAGE_WHITE=0
    log "$IMAGE_PATH has $PERCENTAGE_WHITE % white"
  else
    PERCENTAGE_WHITE=0
  fi

  if [[ $SKIP_EMPTY_PAGES == 1 && $(echo "$PERCENTAGE_WHITE > 99.8" | bc -l) == 1 ]]; then
    log "Skipping empty page $IMAGE_FILE with white percentage $PERCENTAGE_WHITE"

  else
    log "Keeping page and converting to png"
    runconstrained $TIMEVERBOSE convert -density ${RESOLUTION}x${RESOLUTION} -units PixelsPerInch -type TrueColor -quality 80 $IMAGE_PATH $IMAGE_PATH.png | logstdout
  fi

  status=$?
  #rm $IMAGE_PATH

  log ""
  log "Scan page pre-processing done, status = $status"
}

if [[ $VERBOSE == 1 ]]; then
  (
    flock 200
    process_page
  ) 200>$LOCKFILE
else
  process_page
fi;

exit $status
